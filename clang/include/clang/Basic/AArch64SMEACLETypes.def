//===-- AArch64SMEACLETypes.def - Metadata about SME types ------*- C++ -*-===//
//
//
//===----------------------------------------------------------------------===//
//
//  This file defines various SME builtin types.  The macros are:
//
//    SME_TYPE(Name, Id, SingletonId) - A builtin type that has not been
//    covered by any other #define.  Defining this macro covers all
//    the builtins.
//
//    SME_VECTOR_TYPE(Name, Id, SingletonId, ElKind, ElBits, IsSigned, IsFP) -
//    An SME scalable flattened matrix (vector).
//
// where:
//
//  - Name is the name of the builtin type.
//
//  - BuiltinType::Id is the enumerator defining the type.
//
//  - Context.SingletonId is the global singleton of this type.
//
//  - ElKind enumerates the type of the elements.
//
//  - ElBits is the size of one element in bits.
//
//  - IsSigned is true for vectors of signed integer elements and
//    for vectors of floating-point elements.
//
//  - IsFP is true for vectors of floating-point elements.
//
//  - IsBF true for vector of brain float elements.
//===----------------------------------------------------------------------===//

#ifndef SME_VECTOR_TYPE
#define SME_VECTOR_TYPE(Name, MangledName, Id, SingletonId, NumEls, ElBits,    \
                        IsSigned, IsFP, IsBF)                                  \
  SME_TYPE(Name, Id, SingletonId)
#endif

//===- Vector point types -----------------------------------------------===//


SME_VECTOR_TYPE("__SMInt8_t", "__SMInt8_t", SmeInt8, SmeInt8Ty, 256, 8, true, false, false)
SME_VECTOR_TYPE("__SMInt16_t", "__SMInt16_t", SmeInt16, SmeInt16Ty, 64, 16, true, false, false)
SME_VECTOR_TYPE("__SMInt32_t", "__SMInt32_t", SmeInt32, SmeInt32Ty, 16, 32, true, false, false)
SME_VECTOR_TYPE("__SMInt64_t", "__SMInt64_t", SmeInt64, SmeInt64Ty, 4, 64, true, false, false)
SME_VECTOR_TYPE("__SMInt128_t", "__SMInt128_t", SmeInt128, SmeInt128Ty, 1, 128, true, false, false)

SME_VECTOR_TYPE("__SMUint8_t", "__SMUint8_t", SmeUint8, SmeUint8Ty, 256, 8, false, false, false)
SME_VECTOR_TYPE("__SMUint16_t", "__SMUint16_t", SmeUint16, SmeUint16Ty, 64, 16, false, false, false)
SME_VECTOR_TYPE("__SMUint32_t", "__SMUint32_t", SmeUint32, SmeUint32Ty, 16, 32, false, false, false)
SME_VECTOR_TYPE("__SMUint64_t", "__SMUint64_t", SmeUint64, SmeUint64Ty, 4, 64, false, false, false)
SME_VECTOR_TYPE("__SMUint128_t", "__SMUint128_t", SmeUint128, SmeUint128Ty, 1, 128, false, false, false)

SME_VECTOR_TYPE("__SMFloat16_t", "__SMFloat16_t", SmeFloat16, SmeFloat16Ty, 64, 16, true, true, false)
SME_VECTOR_TYPE("__SMFloat32_t", "__SMFloat32_t", SmeFloat32, SmeFloat32Ty, 16, 32, true, true, false)
SME_VECTOR_TYPE("__SMFloat64_t", "__SMFloat64_t", SmeFloat64, SmeFloat64Ty, 4, 64, true, true, false)

SME_VECTOR_TYPE("__SMBFloat16_t", "__SMBFloat16_t", SmeBFloat16, SmeBFloat16Ty, 64, 16, true, true, true)

#undef SME_VECTOR_TYPE
#undef SME_TYPE
